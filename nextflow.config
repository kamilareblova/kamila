k8s {
   namespace = 'medgen-ns'
   runAsUser = 1000
   storageClaimName = 'pvc-713003-pospisilova-base'
   storageMountPath = '/mnt'
   pod = [ [volumeClaim: 'pvc-713003-pospisilova-cmbg', mountPath: "/cmbg" ]]
   homeDir = '/cmbg/AMP/src'
   launchDir = "${k8s.homeDir}/launch"
   projectDir = "${k8s.homeDir}/project"
   workDir = "${k8s.homeDir}/temp"
   computeResourceType = 'Job'
}

params {
   outDirectory = '/cmbg/AMP/data'
   projectDirectory = '${k8s.projectDir}/xsvato01/TP53_nf'
   ref = '/mnt/references/Homo_sapiens/GRCh37-p13/seq/GRCh37-p13'
   refindex = '/mnt/references/Homo_sapiens/GRCh37-p13/index/BWA/GRCh37-p13.fa'
   gatk = '${k8s.projectDir}/xsvato01/TP53_nf/scripts/gatk'
   varbed = '${k8s.projectDir}/xsvato01/TP53_nf/beds/AMP-bed.bed'
   teststrandbias = '${k8s.projectDir}/xsvato01/TP53_nf/scripts/teststrandbias.R'
   var2vcf_valid = '${k8s.projectDir}/xsvato01/TP53_nf/scripts/var2vcf_valid.pl'
   annovar = '${k8s.projectDir}/xsvato01/TP53_nf/scripts/table_annovar.pl'
   gene_fullxref.txt = '${k8s.projectDir}/xsvato01/TP53_nf/scripts/gene_fullxref.txt'
}


executor {
   queueSize = 50
}


process {
   container = 'xreblova/svattp53new'
   shell = ['/bin/bash', '-eo', 'pipefail']
   scratch = true
   executor = 'k8s'
   pod = [[securityContext:[fsGroupChangePolicy:'OnRootMismatch', allowPrivilegeEscalation:false, runAsUser:1000, runAsGroup:1, fsGroup:1, capabilities:[drop:['ALL']]]], [nodeSelector:'storage=local-ssd']]
   // errorStrategy = { task.exitStatus in [143,137,104,134,139,247, null, ''] ? 'retry' : 'finish' }
   errorStrategy = "retry"
   maxRetries = 3
   cpus = 1
   memory = '100GB'

   withLabel: xxs_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: xs_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: s_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: m_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: l_mem {
      memory = {100.GB * task.attempt * (3/4)}
   }
   withLabel: xl_mem {
      memory = {100.GB * task.attempt * (3/4)}
   }
   withLabel: s_cpu {
      cpus = 1
   }
   withLabel: m_cpu {
      cpus = 4
   }
   withLabel: l_cpu {
      cpus = 8
   }
}
